function [allDataTable,const,scr] = all_analysisCM(subIni,domEye,expName,taskType,nbBlocks,eyeAnalysis)
% ----------------------------------------------------------------------
% all_analysis(subIni,domEye,expName,taskType,nbBlocks,eyeAnalysis)
% ----------------------------------------------------------------------
% Goal of the function :
% Compute automaticaly results and draw curves and graphs.
% ----------------------------------------------------------------------
% Input(s) :
% subIni : subject initial
% domEye : dominant eye
% expName : experiment name
% taskType : task type
% nbBlocks : blocks to include in analysis
% eyeAnalysis : run eye movement analysis (1) or not (0)
%
% e.g. all_analysisCM('CM','R','DPF','Main',[1:6],1)
%
% ----------------------------------------------------------------------
% Output(s):
% none
% ----------------------------------------------------------------------
% Function created by by Nina HANNING (hanning.nina@gmail.com)
% based on a template by Martin SZINTE (martin.szinte@gmail.com)
% edited by Caroline MYERS
% Last update : 2021-06-11
% Project : DPF
% Version : 3.0
% ----------------------------------------------------------------------
close all; warning ('off','all');

dirF = (which('all_analysis'));
dirD = [dirF(1:end-21),sprintf('/Data/%s_%s_data/%s_data',subIni,expName,taskType)];
cd(dirD);

addpath(genpath('../../../Stats/'));

sub.ini      	=   subIni;
sub.domEye    	=   domEye;
sub.expName   	=   expName;
sub.taskType  	=   taskType;
sub.nbBlocks    =   nbBlocks;


%% Eye tracking analysis
eyeAna_bl = [];
if eyeAnalysis
        
    edf2asc = '/Applications/Eyelink/EDF_Access_API/Example/edf2asc';

    for rep = sub.nbBlocks
        
        sub.block = rep;
        dirB = sprintf('%s/Block%i',dirD,sub.block);
        cd(dirB);
        addpath('../../../../Conversion/');
        
        eyeAna_bl = [eyeAna_bl,rep];

        
        %% Data conversion (edf2asc)
        [~,~] = system([edf2asc,' ', sprintf('%s_B%i',sub.ini,sub.block),'.edf -e -y']);
        movefile(sprintf('%s_B%i.asc',sub.ini,sub.block), sprintf('%s_B%i.msg',sub.ini,sub.block));
        [~,~] = system([edf2asc,' ', sprintf('%s_B%i',sub.ini,sub.block),'.edf -s -miss -1.0 -y']);
        movefile(sprintf('%s_B%i.asc',sub.ini,sub.block), sprintf('%s_B%i.dat',sub.ini,sub.block));

        
        %% Data extraction
        load(sprintf('scr_file%s_%s_%s.mat',sub.ini,sub.expName,sub.domEye));
        load(sprintf('const_file%s_%s_%s.mat',sub.ini,sub.expName,sub.domEye));
        
        eyeana_tab(sub);

        % Settings
        [eyeana] = eyeana_config(scr,const);

        % Fixation / saccade analysis
        %[scr,const,eyeana] = eyeana_mainCM(sub,scr,const,eyeana);
        if sub.block == 1
            [allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana);
        elseif sub.block > 1
            [allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana,allData);
            %allData = [allData;thisData];
        else
            
        end
        %[allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana);
        
       const.allData = allData
        % Delete / move files
        delete(sprintf('%s_B%i.msg',sub.ini,sub.block));
        delete(sprintf('%s_B%i.dat',sub.ini,sub.block));
        
        if ~isdir('../AllB');mkdir('../AllB');end;cd('../AllB');
        
filename = 'allDataThisSubj.xlsx';
writematrix(allData,filename,'Sheet',1,'Range','A1')
    end
    
    if ~isempty(eyeAna_bl)
        save(sprintf('%s_scr.mat',subIni),'scr')
        save(sprintf('%s_const.mat',subIni),'const')
        save(sprintf('%s_anaEye.mat',subIni),'eyeana')
        save(sprintf('%s_sub.mat',subIni),'sub')
    else
        cd('../AllB');
    end
    
filename = 'allDataThisSubjALL.xlsx';
writematrix(allData,filename,'Sheet',1,'Range','A1')
%% Now here's the part where we make that matrix a table

allDataTable = array2table(allData)
allDataTable.Properties.VariableNames = {'Block',...
    'TaskType',...
    'TrialNum',...
    'Nan',...
    'TiltEast1',...
    'TiltNorth2',...
    'TiltWest3',...
    'TiltSouth4',...
    'TargetLoc',...
    'CueCond',...
    'NaN1',...
    'NaN2',...
    'NaN3',...
    'NaN4',...
    'NaN5',...
    'NaN6',...
    'NaN7',...
    'NaN8',...
    'NaN9',...
    'NaN10',...
    'KeyPressed',...
    'Correct',...
    'EyeOk',...
    'RT',...
    'NaN',...
    'Contrast',...
    'NaN11',...
    'NaN12',...
    'NaN13',...
    'NaN14',...
    'NaN15',...
    'NaN16',...
    'NaN17',...
    'NaN18',...
    'NaN19',...
    'NaN20',...
    'NaN21',...
    'NaN22',...
    'NaN23',...
    'NaN24',...
    'NaN25',...
    'NaN26',...
    'NaN27',...
    'NaN28',...
    'NaN29',...
    'NaN30',...
    'NaN31',...
    'NaN32',...
    'NaN33',...
    'NaN34'};

%% now continue

    % Collapse files
    %UNCOMENT LATER
    %add_file(sub);
    
    % Trial distribution
    %eyeana_trialstats(sub,const);

else
        edf2asc = '/Applications/Eyelink/EDF_Access_API/Example/edf2asc';

    for rep = sub.nbBlocks
        
        sub.block = rep;
        dirB = sprintf('%s/Block%i',dirD,sub.block);
        cd(dirB);
        addpath('../../../../Conversion/');
        
        eyeAna_bl = [eyeAna_bl,rep];

        
        %% Data conversion (edf2asc)
        [~,~] = system([edf2asc,' ', sprintf('%s_B%i',sub.ini,sub.block),'.edf -e -y']);
        movefile(sprintf('%s_B%i.asc',sub.ini,sub.block), sprintf('%s_B%i.msg',sub.ini,sub.block));
        [~,~] = system([edf2asc,' ', sprintf('%s_B%i',sub.ini,sub.block),'.edf -s -miss -1.0 -y']);
        movefile(sprintf('%s_B%i.asc',sub.ini,sub.block), sprintf('%s_B%i.dat',sub.ini,sub.block));

        
        %% Data extraction
        load(sprintf('scr_file%s_%s_%s.mat',sub.ini,sub.expName,sub.domEye));
        load(sprintf('const_file%s_%s_%s.mat',sub.ini,sub.expName,sub.domEye));
        
        eyeana_tab(sub);

        % Settings
        [eyeana] = eyeana_config(scr,const);

        % Fixation / saccade analysis
        %[scr,const,eyeana] = eyeana_mainCM(sub,scr,const,eyeana);
        if sub.block == 1
            [allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana);
        elseif sub.block > 1
            [allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana,allData);
            %allData = [allData;thisData];
        else
            
        end
        %[allData,thisData] = eyeana_mainCM(sub,scr,const,eyeana);
        
       const.allData = allData
        % Delete / move files
        delete(sprintf('%s_B%i.msg',sub.ini,sub.block));
        delete(sprintf('%s_B%i.dat',sub.ini,sub.block));
        
        if ~isdir('../AllB');mkdir('../AllB');end;cd('../AllB');
        
filename = 'allDataThisSubj.xlsx';
writematrix(allData,filename,'Sheet',1,'Range','A1')
    end
    
    if ~isempty(eyeAna_bl)
        save(sprintf('%s_scr.mat',subIni),'scr')
        save(sprintf('%s_const.mat',subIni),'const')
        save(sprintf('%s_anaEye.mat',subIni),'eyeana')
        save(sprintf('%s_sub.mat',subIni),'sub')
    else
        cd('../AllB');
    end
    
filename = 'allDataThisSubjALL.xlsx';
writematrix(allData,filename,'Sheet',1,'Range','A1')
%% Now here's the part where we make that matrix a table

allDataTable = array2table(allData)
allDataTable.Properties.VariableNames = {'Block',...
    'TaskType',...
    'TrialNum',...
    'Nan',...
    'TiltEast1',...
    'TiltNorth2',...
    'TiltWest3',...
    'TiltSouth4',...
    'TargetLoc',...
    'CueCond',...
    'NaN1',...
    'NaN2',...
    'NaN3',...
    'NaN4',...
    'NaN5',...
    'NaN6',...
    'NaN7',...
    'NaN8',...
    'NaN9',...
    'NaN10',...
    'KeyPressed',...
    'Correct',...
    'EyeOk',...
    'RT',...
    'NaN',...
    'Contrast',...
    'NaN11',...
    'NaN12',...
    'NaN13',...
    'NaN14',...
    'NaN15',...
    'NaN16',...
    'NaN17',...
    'NaN18',...
    'NaN19',...
    'NaN20',...
    'NaN21',...
    'NaN22',...
    'NaN23',...
    'NaN24',...
    'NaN25',...
    'NaN26',...
    'NaN27',...
    'NaN28',...
    'NaN29',...
    'NaN30',...
    'NaN31',...
    'NaN32',...
    'NaN33',...
    'NaN34'};

    
    
    %% rest
    dirF = (which('all_analysis')); dirF =dirF(1:end-20);cd([dirF,'Data/']);
    cdDir = sprintf('%s_%s_data/%s_data/AllB/',sub.ini,expName,sub.taskType);
    cd(cdDir);
    addpath(genpath('../../../../Stats/'));
    addpath('../../../../Conversion/');
    load(sprintf('%s_const.mat',subIni))
    load(sprintf('%s_scr.mat',subIni))
end
end