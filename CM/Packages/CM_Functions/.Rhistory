knitr::opts_chunk$set(echo = TRUE)
library(pracma)
library(ggplot2)
library(plotly)
library(broom)
library(car)
library(olsrr)
library(ppcor)
library(rstatix)
library(dplyr)
library(BayesFactor)
library(writexl)
library(gtools)
library(PairedData)
rm(list = ls())
pathnames <- list.files(pattern="[.]R$", path="/Users/carolinemyers/Desktop/CM_Experiments/Packages/CM_Functions/Data analysis", full.names=TRUE);
sapply(pathnames, FUN=source);
rm(pathnames)
getwd()
dataPath = "/Users/carolinemyers/Desktop/CM_Experiments/COMPLETED/Water/V1_Fountain/WaterSearch_v1.1.3_PREREG/data"
setwd(dataPath)
getwd()
files <- list.files()
exclusionCriteria <- .8
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
library(ggplot2)
library(plotly)
library(broom)
library(car)
library(olsrr)
library(ppcor)
library(rstatix)
library(dplyr)
library(BayesFactor)
library(writexl)
library(gtools)
library(PairedData)
rm(list = ls())
pathnames <- list.files(pattern="[.]R$", path="/Users/carolinemyers/Desktop/CM_Experiments/Packages/CM_Functions/Data analysis", full.names=TRUE);
sapply(pathnames, FUN=source);
rm(pathnames)
getwd()
dataPath = "/Users/carolinemyers/Desktop/CM_Experiments/COMPLETED/Water/V1_Fountain/WaterSearch_v1.1.3_PREREG/data"
setwd(dataPath)
getwd()
files <- list.files()
exclusionCriteria <- .8
getwd()
setwd(dataPath)
getwd()
files <- list.files()
rawDataList <- list()
cleanedDataList <- list()
feedbackQ <- list()
for (ii in 1:length(files)) {
currentRawData <- read.csv(file.path(files[ii])) #read in the data
feedbackQ[ii] <- currentRawData$response[length(currentRawData$subject_id)] #get subject feedback
currentRawData <- currentRawData[currentRawData$task == 'main_T2_Trial', ]  #keep only testing trials
prolificPID <- currentRawData$subject_id[length(currentRawData$subject_id)] #get the subject's prolific ID
subNo <- repmat(ii, length(currentRawData$subject_id),1) #assign a number to the subject
trial <-1:length(currentRawData$subject_id)
currentRawData <-   cbind.data.frame(prolificPID,subNo,trial,currentRawData)
#Get rid of trials < 200 ms!!
currentRawData$rt <- as.numeric(currentRawData$rt)
currentRawData <- subset(currentRawData, rt > 200)
currentRawData$correctNumeric <- NA
for (jj in 1:nrow(currentRawData)) {
if  (currentRawData$correct[jj] == 'true') {
currentRawData$correctNumeric[jj] = 1
} else if (currentRawData$correct[jj] == 'false') {
currentRawData$correctNumeric[jj] = 0
}
}
currentRawData$included <- NA
if (mean(currentRawData$correctNumeric) < exclusionCriteria) {
currentRawData$included = 0
} else if  (mean(currentRawData$correctNumeric) >= exclusionCriteria) {
currentRawData$included = 1
}
#Remove unnecessary columns
currentRawData <- subset(currentRawData, select = -c(success,timeout,failed_images, failed_audio, failed_video,trial_type, trial_index,time_elapsed, internal_node_id,subject_id, study_id,session_id,stimulus))
rawDataList[[ii]] <-  (currentRawData[,1:ncol(currentRawData)])
if (rawDataList[[ii]]$included[[1]] == 1) {
cleanedDataList[[ii]]  <- rawDataList[[ii]]
}
if (rawDataList[[ii]]$included[[1]] == 0) {
cleanedDataList[[ii]]  <- NULL
}
cleanedDataList<-cleanedDataList[!sapply(cleanedDataList,is.null)]
}
rawData <- do.call(rbind, rawDataList)
cleanedData <- do.call(rbind, cleanedDataList)
rm(list = c('ii','jj','trial','files','subNo','prolificPID','currentRawData','exclusionCriteria'))
#write_xlsx(cleanedData,"cleanedDatur.xlsx")
#Summarizing each subject
subjectSummary <- cleanedData %>%
group_by(subNo) %>%
summarise(overallAccuracy = mean(cleanedData$correctNumeric), sd = sd(rt),n = n())
nIncluded <- nrow(subjectSummary)
cleanedData$rt <- as.numeric(cleanedData$rt)
# Finding correct target present trials
correctTargetPresentTrials <- cleanedData %>%
group_by(subNo,target,set_size) %>%
filter(correct == "true",target_present == "true") %>%
summarise(medianRT = median(rt), sd = sd(rt),n = n())
correctTargetPresentTrials$target <- factor(correctTargetPresentTrials$target)
correctTargetPresentTrials$set_size <- factor(correctTargetPresentTrials$set_size, levels=c(4,5,6,7,8))
# Finding JUST target present trials (for accuracy later.)
justTargetPresentTrials <- cleanedData %>%
group_by(subNo,target,set_size) %>%
filter(target_present == "true") %>%
summarise(meanAcc = mean(correctNumeric), sdAcc = sd(correctNumeric),n = n())
justTargetPresentTrials$target <- factor(justTargetPresentTrials$target)
justTargetPresentTrials$set_size <- factor(justTargetPresentTrials$set_size, levels=c(4,5,6,7,8))
correctTargetPresentTrials <- data.frame(correctTargetPresentTrials)
datac <- summarySEwithin(correctTargetPresentTrials, measurevar="medianRT", withinvars=c("set_size","target"), idvar="subNo")
datac
#library(ggplot2)
ggplot(datac, aes(x= set_size, y=medianRT, fill=target)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=medianRT-ci, ymax=medianRT+ci)) +
ggtitle(paste0("Median RT on correct target present trials (n = ",nIncluded,")\n")) +
labs(x = "set size", y = "median RT", color = "Legend Title\n") +
scale_fill_manual(values=c("#CCCCCC","#FFFFFF"),labels = c("Water flows down (normal)", "Water flows up (reverse)")) +
theme_bw()
an2 <- aov(medianRT ~ (set_size * target) + Error(subNo/(set_size * target)), correctTargetPresentTrials)
summary(an2)
res.aov <- anova_test(
data = correctTargetPresentTrials, dv = medianRT, wid = subNo,
within = c(set_size, target)
)
get_anova_table(res.aov)
library(dplyr)
PairedRT <- cleanedData %>%
group_by(subNo,target) %>%
filter(correct == "true",target_present == "true") %>%
summarise(medianRT = median(rt), sd = sd(rt),n = n())
detach("package:plyr", unload = TRUE)
library(dplyr)
PairedRT <- cleanedData %>%
group_by(subNo,target) %>%
filter(correct == "true",target_present == "true") %>%
summarise(medianRT = median(rt), sd = sd(rt),n = n())
PairedRT$target <- factor(PairedRT$target)
waterDownRT <- subset(PairedRT ,  target == "img/Water_Down_Target.gif", medianRT,
drop = TRUE)
waterUpRT <- subset(PairedRT,target == "img/Water_Up_Target.gif", medianRT,
drop = TRUE)
# Plot paired data
library(PairedData)
pd <- paired(waterDownRT, waterUpRT)
plot(pd, type = "profile") +
ggtitle(paste0("Median RT on correct target present trials (n = ",nIncluded,")\n")) +
theme_bw()
t.test(waterDownRT, waterUpRT, paired = TRUE, alternative = "two.sided")
ttestBF(waterDownRT, waterUpRT, paired = TRUE, alternative = "two.sided")
mean(waterDownRT)
mean(waterUpRT)
library(dplyr)
###########
PairedAcc <- cleanedData %>%
group_by(subNo,target) %>%
filter(target_present == "true") %>%
summarise(meanAcc = mean(correctNumeric), sd = sd(correctNumeric),n = n())
PairedAcc$target <- factor(PairedAcc$target)
waterDownAcc <- subset(PairedAcc ,  target == "img/Water_Down_Target.gif", meanAcc,
drop = TRUE)
waterUpAcc <- subset(PairedAcc,target == "img/Water_Up_Target.gif", meanAcc,
drop = TRUE)
# Plot paired data
pd <- paired(waterDownAcc, waterUpAcc)
plot(pd, type = "profile") +
ggtitle(paste0("Mean accuracy on target present trials (n = ",nIncluded,")\n")) +
theme_bw()
t.test(waterDownAcc, waterUpAcc, paired = TRUE, alternative = "two.sided")
ttestBF(waterDownAcc, waterUpAcc, paired = TRUE, alternative = "two.sided")
mean(waterDownAcc)
mean(waterUpAcc)
justTargetPresentTrials <- data.frame(justTargetPresentTrials)
datad <- summarySEwithin(justTargetPresentTrials, measurevar="meanAcc", withinvars=c("set_size","target"), idvar="subNo")
datad
ggplot(datad, aes(x= set_size, y=meanAcc, fill=target)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=meanAcc-ci, ymax=meanAcc+ci)) +
ggtitle(paste0("Mean accuracy on target present trials (n = ",nIncluded,")\n")) +
labs(x = "set size", y = "mean accuracy", color = "Legend Title\n") +
scale_fill_manual(values=c("#CCCCCC","#FFFFFF"),labels = c("Water flows down (normal)", "Water flows up (reverse)")) +
theme_bw()
an3 <- aov(meanAcc ~ (set_size * target) + Error(subNo/(set_size * target)), justTargetPresentTrials)
summary(an3)
res.aov <- anova_test(
data = justTargetPresentTrials, dv = meanAcc, wid = subNo,
within = c(set_size, target)
)
get_anova_table(res.aov)
